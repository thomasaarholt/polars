window.SIDEBAR_ITEMS = {"constant":[["NULL",""]],"enum":[["AAggExpr",""],["AExpr",""],["ALogicalPlan","ALogicalPlan is a representation of LogicalPlan with Nodes which are allocated in an Arena"],["Context",""],["FunctionNode",""],["LiteralValue",""],["LogicalPlan",""]],"fn":[["collect_fingerprints",""],["find_column_union_and_fingerprints","Find the union between the columns per unique IO operation. A unique IO operation is the file + the predicates pushed down to that file"],["lit","Create a Literal Expression from `L`"],["node_to_expr","converts a node from the AExpr arena to Expr"],["node_to_lp","converts a node from the ALogicalPlan arena to a LogicalPlan"],["optimize",""],["to_aexpr","converts expression to AExpr and adds it to the arena, which uses an arena (Vec) for allocation"],["to_alp","converts LogicalPlan to ALogicalPlan it adds expressions & lps to the respective arenas as it traverses the plan finally it returns the top node of the logical plan"]],"struct":[["AExprIter",""],["ALogicalPlanBuilder",""],["AlpIter",""],["ExprIter",""],["ExprMut",""],["FileCacher","Aggregate all the columns used in csv scans and make sure that all columns are scanned in one go. Due to self joins there can be multiple Scans of the same file in a LP. We already cache the scans in the PhysicalPlan, but we need to make sure that the first scan has all the columns needed."],["FileFingerPrint",""],["LogicalPlanBuilder",""],["Null","The literal Null"],["OptState","State of the allowed optimizations"],["PredicatePushDown",""],["ProjectionPushDown",""],["SimplifyBooleanRule",""],["SimplifyExprRule",""],["StackOptimizer","Optimizer that uses a stack and memory arenas in favor of recursion"],["TypeCoercionRule",""]],"trait":[["AnonymousScan",""],["ArenaExprIter",""],["ArenaLpIter",""],["DataFrameUdf",""],["DataFrameUdfMut",""],["Literal",""],["OptimizationRule",""],["Optimize",""],["UdfSchema",""]],"type":[["AllowedOptimizations","AllowedOptimizations"]]};